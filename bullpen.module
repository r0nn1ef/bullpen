<?php
/**
 * @file bullpen.module
 * Allows files to be uploaded and assigned to nodes in a holding area for approval.
 */

require_once dirname( __FILE__ ) . '/bullpen.block.inc';

/**
 * Implements hook_help().
 */
function bullpen_help($path, $arg) {
  switch ($path) {
    // Main module help for the block module
    case 'admin/help#bullpen':
      return '<p>' . t('Allows files to be uploaded and assigned to nodes in a holding area for approval.') . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function bullpen_menu() {
  $items = array();

  $items['admin/config/media/bullpen'] = array(
    'title' => 'Bullpen',
    'description' => 'Configure Bullpen file uploads settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bullpen_settings_form'),
    'access arguments' => array('administer bullpen settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'bullpen.admin.inc',
  );

  $items['bullpen'] = array(
    'title' => 'Upload',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bullpen_upload_form'),
    'access arguments' => array('upload files to bullpen'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'bullpen.pages.inc'
  );
  $items['bullpen/upload'] = array(
    'title' => 'Submit files for review',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['node/%node/bullpen'] = array(
    'title' => 'Pending Files',
    'page callback' => 'bullpen_request_list_page',
    'page arguments' => array(1),
    'access callback' => 'bullpen_tab_access',
    'access arguments' => array(1),
    'file' => 'bullpen.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -5
  );

  $items['node/%node/bullpen/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK
  );

  $items['node/%node/bullpen/%bullpen_item'] = array(
    'title' => 'Details',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bullpen_item_approval_form', 3),
    'access arguments' => array('approve bullpen files'),
    'file' => 'bullpen.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  );

  $items['node/%node/bullpen/%bullpen_item/delete'] = array(
    'title' => 'Details',
    'page callback' => 'bullpen_item_delete',
    'page arguments' => array(3),
    'access arguments' => array('administer bullpen requests'),
    'file' => 'bullpen.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['bullpen_autocomplete'] = array(
    'title' => 'Bullpen autocomplete',
    'page callback' => 'bullpen_autocomplete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'bullpen.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function bullpen_permission() {
  $permissions = array(
    'upload files to bullpen' => array(
      'title' => t('Upload files to bullpen'),
      'description' => t('Allows users to upload files/images to a &quot;bullpen&quot; holding area.'),
    ),
    'approve bullpen files' => array(
      'title' => t('Approve bullpen files'),
      'description' => t('Approve files uploaded to the &quot;bullpen&quot; holding area for nodes.'),
      'restrict access' => TRUE,
    ),
    'administer bullpen settings' => array(
      'title' => t('Administer bullpen settings'),
      'description' => t('Change various settings for the Bullpen configuration.'),
      'restrict access' => TRUE,
    ),
    'administer bullpen requests' => array(
      'title' => t('Administer bullpen requests'),
      'description' => t('Administrative utility that gives full control over bullpen uploads.'),
      'restrict access' => TRUE,
    ),
  );

  return $permissions;
}

function bullpen_access($permission, $node) {
  global $user;
  $supported_types = variable_get('bullpen_supported_node_types', array());
  if (user_access('administer bullpen requests', $user) || ( user_access($permission) && in_array($node->type, $supported_types)) ) {
    return TRUE;
  }
  return FALSE;
}

function bullpen_tab_access($node) {
  $allowed_types = variable_get('bullpen_supported_node_types', array());
  if (in_array($node->type, $allowed_types)) {
    return user_access('administer bullpen requests') || user_access('approve bullpen files');
  }
  return FALSE;
}

/**
 * Implements hook_node_view_alter().
 */
function bullpen_node_view_alter(&$build) {
  $types = variable_get('bullpen_supported_node_types', array());

  if (count($types) && user_access('upload files to bullpen') && isset($build['#node']) && in_array($build['#node']->type, $types) && $build['#view_mode'] == 'full') {
    $node = $build['#node'];
    $links = array(
      l(t('Add photos'), 'bullpen', array('query' => array('eid' => $node->nid, 'destination' => current_path() ))),
    );
    $build['action_links'] = array(
      '#markup' => theme('item_list', array('items' => $links, 'attributes' => array('class' => array('action-links'))))
    );
  }
}

function bullpen_item_load($rid) {
  return load_bullpen_item($rid);
}

function load_bullpen_item($rid) {
  $query = db_select('bullpen_request', 'r')
    ->fields('r', array('rid', 'description', 'entity_id', 'uid', 'created', 'changed'));
  $query->leftJoin('bullpen_files', 'bf', 'r.rid=bf.rid');

  $query->addField('bf', 'iid');
  $query->addField('bf', 'fid');
  $query->addField('bf', 'status');
  $query->addField('bf', 'created', 'f_created');
  $query->addField('bf', 'changed', 'f_changed');
  $query->addField('bf', 'note');
  $query->addField('bf', 'processed_by');

  $query->condition('r.rid', $rid, '=');
  $query->orderBy('bf.iid, bf.fid, r.rid');
  $result = $query->execute();

  if ($result->rowCount() == 0) {
    return FALSE;
  }

  $bullpen = FALSE;

  while ( $row = $result->fetchAssoc() ) {
    if (!$bullpen) {
      $description = trim($row['description']);
      $bullpen = new stdClass();
      $bullpen->rid = (int)$row['rid'];
      $bullpen->description = empty($description) ? NULL : $description;
      $bullpen->entity_id = (int)$row['entity_id'];
      $bullpen->author = user_load((int)$row['uid']);
      $bullpen->created = (int)$row['created'];
      $bullpen->changed = (int)$row['changed'];
      $bullpen->files = array();
    }
    if ( (int)$row['iid'] > 0 ) {
      $file = array(
        'file' => file_load((int)$row['fid']),
        'status' => (int)$row['status'],
        'created' => (int)$row['f_created'],
        'changed' => (int)$row['f_changed'],
        'note' => trim($row['note']),
        'processed_by' => ((int)$row['processed_by'] == 0 ? NULL : user_load((int)$row['processed_by']))
      );
      $bullpen->files[(int)$row['iid']] = $file;
    }
  }

  return $bullpen;
}

function _bullpen_get_entity_id_from_title($string, $entity_type='node') {
  $types = array();
  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title'))
    ->condition('n.title', trim($string), '=')
    ->condition('n.status', 1, '=');

  if ( count($types) ) {
    $query->condition('n.type', $types, 'IN');
  }

  $result = $query->execute();

  if ($result->rowCount() == 0) {
    $return = FALSE;
  } else {
    $return = $result->fetchAssoc();
    $return = $return['nid'];
  }

  return $return;
}

function bullpen_remove_request($rid) {
  watchdog('bullpen', 'Bullpen request @rid being deleted.', array('@rid' => $rid), WATCHDOG_DEBUG);
  db_delete('bullpen_request')
    ->condition('rid', $rid, '=')
    ->execute();
}

function bullpen_delete_file($files) {
  bullpen_delete_multiple($files);
}

function bullpen_delete_files($files) {

  // Delete the physical file from the system.
  foreach ( $files as $file ) {
    file_delete($file, TRUE);
  }

  $keys = array_keys($files);
  db_delete('bullpen_files')
    ->condition('fid', $keys, 'IN')
    ->execute();
}